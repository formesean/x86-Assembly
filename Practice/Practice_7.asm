;====================================================================
; Main.asm file generated by New Project wizard
;
; Created:   Wed Nov 22 2023
; Processor: 8086
; Compiler:  MASM32
;
; Before starting simulation set Internal Memory Size 
; in the 8086 model properties to 0x10000
;====================================================================

INTERRUPT SEGMENT

   ISR0 PROC FAR
      ASSUME CS:INTERRUPT, DS:DATA
      ORG 0500H
      PUSH AX
      PUSH BX
      PUSH CX
      PUSH DX
      
      CMP CLOCK_FLAG, 1
      JZ SET_CLOCK_0
      
      CMP CLOCK_FLAG, 0
      JZ SET_CLOCK_1
      
      JMP SKIP_CLOCK_SET
      
      SET_CLOCK_0:
      MOV CLOCK_FLAG, 0
      JZ SKIP_CLOCK_SET
      
      SET_CLOCK_1:
      MOV CLOCK_FLAG, 1
      JZ SKIP_CLOCK_SET
      
      SKIP_CLOCK_SET:
      
      POP DX
      POP CX
      POP BX
      POP AX
      IRET
   ISR0 ENDP
   
INTERRUPT ENDS


DATA 	SEGMENT

   ORG 01000H
   ;8255 1
   PORTA 	EQU 0C0H
   PORTB	EQU 0C2H
   PORTC	EQU 0C4H
   C_REG	EQU 0C6H
   
   CWORD	EQU 089H
   
   ;8255 2
   PORTA_2	EQU 0D0H
   PORTB_2	EQU 0D2H
   PORTC_2	EQU 0D4H
   C_REG_2	EQU 0D6H
   
   ;8253
   CLOCK_CREG	EQU 0DEH
   CLOCK0	EQU 0D8H
   
   ;8259
   PIC1		EQU 0C8H
   PIC2		EQU 0CAH
   
   ICW1		EQU 013H
   ICW2		EQU 080H
   ICW4		EQU 03H
   
   OCW1		EQU 11111110B
   
   ;LCD
   CLR_DSP	EQU 1H
   CR_HOME	EQU 2H
   
   FUNC1	EQU 00000110B
   DISP_ON	EQU 00001100B
   FUNC2	EQU 00111000B
   
   ; VARIABLES
   MINUTE 	DB 0
   SECOND	DB 0
   
   CLOCK_FLAG	DB 0
   
   KEYPAD_ARR 	DB 1,4,7,'*',2,5,8,0,3,6,9,'#'
   
   S_PROMPT 	DB 'Input time!$'
   
   ; 1 SECOND IS 4000, SO 1/100 WOULD BE 40
   CLOCK_CYCLE 	DW 40
   
DATA	ENDS

STK SEGMENT STACK
   BOS		DW 64 DUP(?)
   TOS		LABEL WORD
STK ENDS

CODE    SEGMENT PUBLIC 'CODE'
        ASSUME CS:CODE, DS:DATA, SS: STK
	
	ORG 02000H
START:
        SEG_INIT: ; SETUPS THE SEGMENT REGISTERS
	
	   MOV AX, CODE
	   MOV CS, AX
	   MOV AX, DATA
	   MOV DS, AX
	   MOV AX, STK
	   MOV SS, AX
	   LEA SP, TOS
	 
	   CLI
	P8255_INIT: ; SETUPS BOTH 8255s
	
	   MOV DX, C_REG
	   MOV AL, CWORD
	   
	   OUT DX, AL
	   
	   MOV DX, C_REG_2
	   
	   OUT DX, AL
	
	LCD_INIT: ; INITIALIZES THE LCD DISPLAY
	
	    MOV AL, CLR_DSP
	    CALL LCD_COMMAND
	    
	    MOV AL, CR_HOME
	    CALL LCD_COMMAND
	    
	    MOV AL, FUNC1
	    CALL LCD_COMMAND
	    
	    MOV AL, DISP_ON
	    CALL LCD_COMMAND
	    
	    MOV AL, FUNC2
	    CALL LCD_COMMAND
	    
	 ISR_INIT:
	 
	    MOV DX, PIC1
	    MOV AL, ICW1
	    OUT DX, AL
	    
	    MOV DX, PIC2
	    MOV AL, ICW2
	    OUT DX, AL
	    
	    MOV AL, ICW4
	    OUT DX, AL
	    
	    MOV AL, OCW1
	    OUT DX, AL
	    
	    MOV AX, OFFSET ISR0
	    MOV [ES:200H], AX
	    MOV AX, SEG ISR0
	    MOV [ES:202H], AX
	    
	 MAIN:
	 
	    MOV AL, 2
	    MOV AH, 5
	    CALL LCD_CURSOR
	    
	    MOV DX, OFFSET S_PROMPT
	    CALL LCD_STRING
	    
	    GET_TIME:
	 
	       CALL DISPLAY_TIME
	    
	       CALL KEYPAD_INPUT  
	       
	       CMP AL, '*'
	       JZ COUNT_DOWN_INIT
	       
	       CMP AL, '#'
	       JZ GET_TIME
	       
	       PUSH AX
	       
	       XOR AH, AH
	       MOV AL, MINUTE
	       MOV BX, 10
	       MUL BX
	       
	       POP BX
	       
	       ADD AX, BX
	       
	       CMP AX, 100
	       JNGE SKIP_TIME_RESET
	       
	       MOV MINUTE, 0
	       XOR AX, AX
	       
	       SKIP_TIME_RESET:
	       
	       MOV MINUTE, AL
	       
	       MOV CX, 50000
	       CALL DELAY
	       
	       JMP GET_TIME
	       
	    COUNT_DOWN_INIT:
	       STI
	       
	       MOV AL, CLR_DSP
	       CALL LCD_COMMAND
	       
	    COUNT_DOWN: ; VERY SPAGHETTI CODE OVER HERE
	       
	       CMP CLOCK_FLAG, 0
	       JNZ COUNT_DOWN
	       
	       CMP SECOND, 0
	       JNZ SKIP_DEC
	       
	       CALL DISPLAY_TIME
	       
	       DEC MINUTE	       
	       MOV SECOND, 59
	       
	       SKIP_DEC:            
	       
	       CALL DISPLAY_TIME
	       
	       DEC SECOND
	              	       
	       CMP SECOND, 0
	       JNZ SKIP_CHECK
	       
	       CMP MINUTE, 0
	       JNZ SKIP_CHECK
	       
	       CALL DISPLAY_TIME
	       MOV CX, CLOCK_CYCLE
	       CALL CLOCK_DELAY
	       
	       JMP START
	       
	       SKIP_CHECK:
	       
	       MOV CX, CLOCK_CYCLE
	       CALL CLOCK_DELAY
	       
	       JMP COUNT_DOWN
	    
	    JMP MAIN
	    
	
ENDLESS:
        JMP ENDLESS
	
; PROCEDURES =====================================================

; PUT CLOCK DELAY IN CX
CLOCK_DELAY PROC
   PUSH AX
   PUSH CX
   PUSH DX
   
   MOV AL, 00110001B
   MOV DX, CLOCK_CREG
   
   OUT DX, AL
   
   MOV DX, CLOCK0
   MOV AL, CL
   
   OUT DX, AL
   
   MOV AL, CH
   OUT DX, AL
   
   MOV DX, PORTC_2
   CLOCK_DELAY_POLL:
      IN AL, DX
      CMP AL, 0
      JZ CLOCK_DELAY_POLL
   
   POP DX
   POP CX
   POP AX
   RET
CLOCK_DELAY ENDP


; DISPLAYS TIME, USES MINUTE AND SECOND VAR
DISPLAY_TIME PROC
   PUSH AX
   PUSH DX
   
   MOV AH, 8
   MOV AL, 1
   CALL LCD_CURSOR
   
   MOV AL, MINUTE
   CALL SEPARATE_NUM
   
   ADD AL, 30H
   ADD AH, 30H
   
   CALL LCD_DATA
   
   MOV AL, AH
   
   CALL LCD_DATA
   
   MOV AL, ':'
   CALL LCD_DATA
   
   MOV AL, SECOND
   CALL SEPARATE_NUM
   
   ADD AL, 30H
   ADD AH, 30H
   
   CALL LCD_DATA
   
   MOV AL, AH
   
   CALL LCD_DATA
   
   POP AX
   POP DX
   RET
DISPLAY_TIME ENDP

;SEPARATES NUM IN AL

;LSD GOES TO AH
;MSD GOES TO AL
SEPARATE_NUM PROC
   PUSH BX
   XOR AH, AH
   
   MOV BL, 10
   DIV BL
   
   POP BX
   RET
SEPARATE_NUM ENDP

; PUTS OUTPUT IN AL
KEYPAD_INPUT PROC
   PUSH DX
   
   MOV DX, PORTC
   
   KEYPAD_INPUT_LOOP:
      IN AL, DX
      
      CMP AL, 16
      JGE KEYPAD_INPUT_SKIP
      
   JMP KEYPAD_INPUT_LOOP
   
   KEYPAD_INPUT_SKIP:
   
   XOR AL, 00010000B
   
   MOV DX, OFFSET KEYPAD_ARR
   ADD DL, AL
   
   MOV SI, DX
   
   MOV AL, [SI]
   
   POP DX
   RET
KEYPAD_INPUT ENDP

; MOVE STRING OFFSET INTO DX
LCD_STRING PROC
   PUSH AX
   PUSH DX
   
   MOV SI, DX
   
   STRING_LOOP:
      MOV AL, [SI]
      
      CMP AL, '$'
      JZ STRING_LOOP_SKIP
      
      CALL LCD_DATA
      
      INC SI
   
   JMP STRING_LOOP
   
   STRING_LOOP_SKIP:
   
   POP DX
   POP AX
   RET
LCD_STRING ENDP
; MOVE X INTO AH, Y INTO AL
LCD_CURSOR PROC
   PUSH DX
   PUSH AX
   
   CMP AL, 0
   JZ CURSOR_0
   CMP AL, 1
   JZ CURSOR_1
   CMP AL, 2
   JZ CURSOR_2
   CMP AL, 3
   JZ CURSOR_3
   
   JMP LCD_CURSOR_SKIP
   CURSOR_0:
      MOV AL, 080H
      JMP LCD_CURSOR_SKIP
   CURSOR_1:
      MOV AL, 0C0H
      JMP LCD_CURSOR_SKIP
   CURSOR_2:
      MOV AL, 094H
      JMP LCD_CURSOR_SKIP
   CURSOR_3:
      MOV AL, 0D4H
      JMP LCD_CURSOR_SKIP
      
   LCD_CURSOR_SKIP:
   
   ADD AL, AH
   
   CALL LCD_COMMAND
   
   POP AX
   POP DX
   RET
LCD_CURSOR ENDP
; MOVE COMMAND INTO AL
LCD_COMMAND PROC
   PUSH AX
   PUSH CX
   PUSH DX
   
   MOV DX, PORTA
   OUT DX, AL
   
   MOV DX, PORTB
   MOV AL, 00000001B
   OUT DX, AL
   
   MOV AL, 00000000B
   OUT DX, AL
   
   MOV CX, 1000
   CALL DELAY
   
   POP DX
   POP CX
   POP AX
   RET
LCD_COMMAND ENDP

; MOVE DATA INTO AL
LCD_DATA PROC
   PUSH AX
   PUSH CX
   PUSH DX
   
   MOV DX, PORTA
   OUT DX, AL
   
   MOV DX, PORTB
   MOV AL, 00000011B
   OUT DX, AL
   
   MOV AL, 00000010B
   OUT DX, AL
   
   MOV CX, 1000
   CALL DELAY
   
   POP DX
   POP CX
   POP AX
   RET
LCD_DATA ENDP

; MOVE DELAY INTO CX
DELAY PROC
   PUSH CX
   
   DELAY_LOOP:
      NOP
   LOOP DELAY_LOOP
   
   POP CX
   RET
DELAY ENDP

CODE    ENDS
        END START
