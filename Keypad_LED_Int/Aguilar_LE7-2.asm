;====================================================================
; Main.asm file generated by New Project wizard
;
; Created:   Wed Oct 30 2024
; Processor: 8086
; Compiler:  MASM32
;
; Before starting simulation set Internal Memory Size 
; in the 8086 model properties to 0xF0000
;====================================================================

PROCED1 SEGMENT 'CODE'
ISR1 PROC FAR
ASSUME CS:PROCED1, DS:DATA
ORG 01000H ; write code within below starting at address 08000H
   PUSHF ; push 16-bit operands
   PUSH AX ; save program context
   PUSH DX
   
   ;<write the ISR code here>
   XOR AX, AX
   MOV DX, PORTC
   IN AL, DX

   AND AL, 0FH
   CMP AL, 0CH 		; check if key pressed is * 
   JE D_CHAR
   CMP AL, 0EH 		; check if key pressed is # 
   JE D_CHAR
   CMP AL, 0DH 		; check if key pressed is 0 
   JE D0
   CMP AL, 00H 		; check if key pressed is 1 
   JE D1 		
   CMP AL, 01H 		; check if key pressed is 2 
   JE D2 	
   CMP AL, 02H 		; check if key pressed is 3  
   JE D3 	
   CMP AL, 04H 		; check if key pressed is 4 
   JE D4 	
   CMP AL, 05H 		; check if key pressed is 5  
   JE D5 	
   CMP AL, 06H 		; check if key pressed is 6 
   JE D6 	
   CMP AL, 08H 		; check if key pressed is 7 
   JE D7 	
   CMP AL, 09H 		; check if key pressed is 8 
   JE D8 	
   CMP AL, 0AH 		; check if key pressed is 9 
   JE D9 	

   D_CHAR:
      MOV DX, PORTA
      MOV AL,  01000000B
      JMP CONT
   D0:
      MOV DX, PORTA
      MOV AL, 00111111B		;0
      JMP CONT
   D1:
      MOV DX, PORTA
      MOV AL, 00000110B 	;1
      JMP CONT
   D2:
      MOV DX, PORTA
      MOV AL, 01011011B 	;2
      JMP CONT
   D3:
      MOV DX, PORTA
      MOV AL, 01001111B 	;3
      JMP CONT
   D4:
      MOV DX, PORTA
      MOV AL, 01100110B 	;4
      JMP CONT
   D5:	
      MOV DX, PORTA
      MOV AL, 01101101B 	;5
      JMP CONT
   D6:
      MOV DX, PORTA
      MOV AL, 01111101B 	;6
      JMP CONT
   D7: 	
      MOV DX, PORTA
      MOV AL, 00000111B 	;7
      JMP CONT
   D8:
      MOV DX, PORTA
      MOV AL,  01111111B 	;8
      JMP CONT
   D9:
      MOV DX, PORTA
      MOV AL, 01100111B 	;9
      JMP CONT

   CONT:
      MOV NUM, AL
      OUT DX, AL  
   ; end of ISR code
   
   POP DX ; retrieve program context
   POP AX
   POPF ; pop 16-bit operands
   IRET ; return from interrupt
ISR1 ENDP ; end of procedure
PROCED1 ENDS

PROCED2 SEGMENT 'CODE'
ISR2 PROC FAR
ASSUME CS:PROCED2, DS:DATA
ORG 02000H ; write code within below starting at address 09000H
   PUSHF ; push 16-bit operands
   PUSH AX ; save program context
   PUSH DX
   ;<write the ISR code here>
   MOV DX, PORTB
   MOV AL, NUM
   OUT DX, AL
   ; end of ISR code
   POP DX ; retrieve program context
   POP AX
   POPF ; pop 16-bit operands
   IRET ; return from interrupt
ISR2 ENDP ; end of procedure
PROCED2 ENDS

DATA SEGMENT
ORG 03000H
   PORTA EQU 0F0H	; 8255 PPI
   PORTB EQU 0F2H
   PORTC EQU 0F4H
   COM_REG1 EQU 0F6H
   
   PIC1 EQU 0F8H	; 8295 
   PIC2 EQU 0FAH
   ICW1 EQU 013H
   ICW2 EQU 080H
   ICW4 EQU 003H
   OCW1 EQU 0FCH
   LED DW 0
   NUM DB 00H
DATA ENDS

STK SEGMENT STACK
   BOS DW 64d DUP (?)
   TOS LABEL WORD
STK ENDS

CODE    SEGMENT PUBLIC 'CODE'
        ASSUME CS:CODE, DS:DATA, SS:STK
	
	ORG 04000H

START:
   MOV AX, DATA
   MOV DS, AX ; set the Data Segment address
   MOV AX, STK
   MOV SS, AX ; set the Stack Segment address
   LEA SP, TOS ; set address of SP as top of stack
   CLI ; clears IF flag 
   
   ;program the 1st 8255
   MOV DX, COM_REG1
   MOV AL, 10000001B
   OUT DX, AL

   ;program the 8259
   MOV DX, PIC1 ; set I/O address to access ICW1
   MOV AL, ICW1
   OUT DX, AL ; send command word
   MOV DX, PIC2 ; set I/O address to access ICW2,ICW4 and OCW1
   MOV AL, ICW2
   OUT DX, AL ; send command word
   MOV AL, ICW4
   OUT DX, AL ; send command word
   MOV AL, OCW1
   OUT DX, AL ; send command word
   STI ; enable INTR pin of 8086
   
   ;storing interrupt vector to interrupt vector table in memory
   MOV AX, OFFSET ISR1 ; get offset address of ISR1 (IP)
   MOV [ES:200H], AX ; store offset address to memory at 200H
   MOV AX, SEG ISR1 ; get segment address of ISR1 (CS)
   MOV [ES:202H], AX ; store segment address to memory at 202H
   
   MOV AX, OFFSET ISR2 ; get offset address of ISR2 (IP)
   MOV [ES:204H], AX ; store offset address to memory at 204H
   MOV AX, SEG ISR2 ; get segment address of ISR2 (CS)
   MOV [ES:206H], AX ; store segment address to memory at 206H

   ;foreground routine
   HERE:
      MOV CX, LED
      CMP CX, 0
      JE LED_ON
      JNE LED_OFF
      
      LED_ON:
	 MOV LED, 1
	 MOV DX, PORTC
	 MOV AL, 00000000B
	 OUT DX, AL
	 CALL DELAY_1MS
	 JMP HERE
	 
      LED_OFF:
	 MOV LED, 0
	 MOV DX, PORTC
	 MOV AL, 10000000B
	 OUT DX, AL
	 CALL DELAY_1MS
	 JMP HERE
   
   DELAY_1MS:
      MOV BX, 0A2CAH
   L1:
      DEC BX
      NOP
      JNZ L1
      RET
   RET
   
CODE ENDS
END START
